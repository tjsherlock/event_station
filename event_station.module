<?php
/**
 * @file
 * Provides a simple custom entity type named 'video' for tracking embed codes.
 */

/**
 * Implements hook_entity_info().
 */
function event_station_entity_info() {
  $info = array();
  // Our custom video entity needs to be defined here.
  // See http://drupal.org/node/1026420 and http://drupal.org/node/878804
  // for more documentation.
  $info['event_station'] = array(
    // Human readable label.
    'label' => t('Event Station'),
    // Table for storing entity data, defined in hook_schema().
    'base table' => 'evreg_eventstation',//evreg = event registration, should same as name key in schema
    // Table for storing revision data. 
    'revision table' => 'evreg_eventstation_revision',
    // This helps Entity API know how to query your custom table.   
    'entity keys' => array(
      'id' => 'esid',
      'label' => 'name', //7.x-2.1-dev tjs
      'revision' => 'revision_id',
    ),
    
    'uri callback' => 'entity_class_uri', //7.x-2.1-dev tjs
    //These are the default controllers.
    // 'entity class' => 'Entity',
    'entity class' => 'EventStation', //7.x-2.1-dev tjs
    // 'controller class' => 'DrupalDefaultEntityController',
    // Other options provided by the EntityAPI contrib module
    // 'controller class' => 'EntityAPIController ',
    // 'controller class' => 'EntityAPIControllerExportable',
    'controller class' => 'EventStationController',  //7.x-2.1-dev tjs
    // This is a uri function provided by the Entity contrib module.
    // It's a simple wrapper around the uri method in the controller class.
     // The information below is used to extend the EntityDefaultUIController
     'admin ui' => array(
       'path' => 'admin/eventstation',
       'controller class' => 'EventStationUIController',
       'menu wildcard' => '%event_station',//must be same as entity name or maybe module name
       'file' => 'event_station.admin.inc'
     ),
     'module' => 'event_station',
     // Controls who can access entity CRUD.
     'access callback' => 'event_station_access',
     // Tell FieldAPI that fields can be attached to our video entity
     'fieldable' => TRUE,
     'bundles' => array(
        'event_station' => array(
          'label' => t('Event Station'),
          'admin' => array(
            'path' => 'admin/eventstation',//same as admin ui path
            'access arguments' => array('administer event stations'),
          ),
        ),
      ),//'bundles'
    //Views exposure
    'views controller class' => 'EntityDefaultViewsController',
    //Custom view modes.
    'view modes' => array(
      'event participant' => array(
        'label' => t('Event Participant'),
        'custom settings' => FALSE,
        ),
      'event manager' => array(
        'label' => t('Event Manager'),
        'custom settings' => FALSE,        
        ),
      'station captain' => array(
        'label' => t('Station Captain'),
        'custom settings' => FALSE,        
        ),
      'guide' => array(
        'label' => t('Guide'),
        'custom settings' => FALSE,        
        ),
      'registration item' => array(
        'label' => t('Registration Item'),
        'custom settings' => FALSE,
        ),
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
        ),      
      ),//view modes
      
  );//$info['event_station']

  return $info;
}


/**
 * Implements hook_entity_property_info().
 */
function event_station_entity_property_info() {
  $info = array();
  $properties = &$info['event_station']['properties'];
  $properties['esid'] = array(
    'label' => t('Event Station ID'),
    'description' => t('The uniquie ID of the event station.'),
    'type' => 'integer',
    'schema field' => 'esid',
  );
  $properties['name'] = array(
    'label' => t('Name'),
    'description' => t('Name of the event station'),
    'type' => 'text',
    'schema field' => 'name',
  );
  $properties['description'] = array(
    'label' => t('Description'),
    'description' => t('A description of the event station.'),
    'type' => 'text',
    'schema field' => 'description',
  );
  $properties['spots'] = array(
    'label' => t('Spots'),
    'description' => t('Spots for the guiding event participant'),
    'type' => 'integer',
    'schema field' => 'spots',
  );
  $properties['guides'] = array(
    'label' => t('Guides'),
    'description' => t('Name of the guiding event participants'),
    'type' => 'list<text>',//textfield?  delta?
    'schema field' => 'guides',
  );
  $properties['event'] = array(
    'label' => t('Event'),
    'description' => t('Event associated with the station.'),
    'type' => 'text',
    'schema field' => 'event',
  );  
  $properties['weight'] = array(
    'label' => t('Weight'),
    'description' => t('The weight of the station.  The lower the integer the lighter the item.'),
    'type' => 'integer',
    'schema field' => 'weight',
  );
  $properties['owner'] = array(
    'label' => t('Owner'),
    'description' => t('The weight of the station.  The lower the integer the lighter the item.'),
    'type' => 'text',
    'schema field' => 'owner',
  );
  $properties['status'] = array(
    'label' => t('Status'),
    'description' => t('Boolean indicating whether the station is open or closed (visible to non-administrators).'),
    'type' => 'boolean',
    'schema field' => 'status',
  );
   $properties['visibility'] = array(
    'label' => t('Weight'),
    'description' => t('Boolean indicating whether the station is visible to non-administrators.'),
    'type' => 'boolean',
    'schema field' => 'weight',
  ); 
  $properties['created'] = array(
    'label' => t('Created'),
    'description' => t('Date the Event Station was created'),
    'type' => 'date',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t('change date'),
    'description' => t('Date the Event Station was last changed'),
    'type' => 'date',
    'schema field' => 'changed',
  );

  return $info;
}
/**
 * Implements hook_menu().
 */
function event_station_menu() {
  $items = array();
  $items['event_station'] = array(
    'title' => 'Event Station Page',
    'page callback' => 'event_station_page',
    'access callback' => TRUE,
    'menu' => 'navigation',
  );
  ////7.x-2.1-dev tjs
  $items['eventstation/%event_station'] = array(
    'title' => 'event station',
    'page callback' => 'event_station_view_entity',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
    $items['eventstation/%event_station/%'] = array(
    'title' => 'Event Station revision',
    'load arguments' => array(2),
    'page callback' => 'event_station_view_revision',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  //kpr($items);
  return $items;
}



/**
 * Access callback for EventStation CRUD operations.
 */
function event_station_access($op, $event_station = NULL, $account = NULL) {
  //if ((($op == 'view' && user_access('view event stations', $account))) || user_access('administer event stations', $account)) {
  if ($op == 'view' && user_access('view event stations', $account)) {
    return TRUE;
  }
  else if (user_access('administer event stations', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function event_station_permission() {
  return array(
    'administer event stations' => array(
      'title' => t('Administer Event Stations'),
    ),
    'view event stations' => array(
      'title' => t('View Event Stations'),
    ),
  );
}

/**
 *  Menu autoloader for /event_station
 *  7.x-2.1-dev tjs
 * 
 *  @see  $items['eventstation/%event_station']
 *  @see event_station_view_entity
 */
function event_station_load($id, $revision_id = NULL) {
  
  if (is_numeric($revision_id)) {
    $es = entity_revision_load('event_station', $revision_id);
    return $es;    
  }
  else {
    $es = entity_load('event_station', array($id));
    return array_pop($es);
  }
}



/**
 * Callback for /videoentity page.
 *
 * Just a place to test things out and be able to see the results on a page.
 * 

 */
function event_station_page() {
  $event_station = entity_load('event_station', array(1));
  //kpr($event_station);

  // Or load it with EFQ.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'event_station');
  $results = $query->execute();
  //kpr($results);
  return 'hello there!';
}


/**
 *  Callback for /event-station/ID page.
 * 
 *  Just a place to render a complete video entity.
 */
function event_station_view_entity($event_station){
    drupal_set_title($event_station->name);
    $es = entity_view('event_station', array($event_station->esid => $event_station));
    //kpr($es);
    //return drupal_render($es);
    return $es;
    //return 'Hello Spaceman';
    
}


/**
 * Callback for /event station/ID/REVISION_ID.
 *
 * Just display the specified revision.
 */
function event_station_view_revision($event_station) {
  $output = event_station_view_entity($event_station);
  drupal_set_title(t('@title revision @id', array('@title' => $event_station->name, '@id' => $event_station->revision_id)));
  return $output;
}

/**
 *  Our custom entity class
 * 
 * The Entity class w'eer overriding is in 
 * sites/all/modules/entity/includes/entity.inc
 * 
 * 7.x-2.1-dev tjs 
 */

class EventStation extends Entity{
    
     /**
   * Override this in order to implement a custom default URI and specify
   * 'entity_class_uri' as 'uri callback' hook_entity_info().
   */
  protected function defaultUri() {
    return array('path' => 'eventstation/' . $this->identifier());
  }
    
}

/**
 * Our custom controller for the event_station type.
 *
 * We're choosing to extend the controller provided by the entity module for
 * full CRUD support for event_station.
 *
 * The EntityAPIController is found in
 * sites/all/modules/contrib/entity/includes/entity.controller.inc
 */
class EventStationController extends EntityAPIController {
    
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    
    //introduce event station properties here.
    
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    
    if($view_mode == 'event participant'){
      
    }elseif ($view_mode == 'event manager'){
      
    }elseif ($view_mode == 'station captain'){
      
    }elseif ($view_mode == 'guide'){
      
    }elseif ($view_mode == 'registration item'){//used when event station appears on an event registration form, similar to a teaser tjs 2014Feb25
      
      $build['name'] = array(
      '#type' => 'markup',
      '#markup' => $entity->name,
      );
      
      $build['description'] = array( 
      '#type' => 'markup',
      '#markup' => $entity->description,
      );
      
    }elseif ($view_mode == 'full'){
      
      $build['name'] = array(
      '#type' => 'markup',
      '#markup' => $entity->name,
      );
    
      $build['esid'] = array(
      '#type' => 'markup',
      '#markup' => $entity->esid,
      );
    
      $build['description'] = array( 
      '#type' => 'markup',
      '#markup' => $entity->description,
      );
    
      $build['spots'] = array(
      '#type' => 'markup',
      '#markup' => $entity->spots,
      );
    
      $build['guides'] = array(
      '#type' => 'markup',
      '#markup' => $entity->guides,
      );
    
      $build['event'] = array(
      '#type' => 'markup',
      '#markup' => $entity->event,
      );
    }
    
    

    return $build;
  }
  
    /**
   * Override save method.
   *
   * Populate created and updated dates automatically.
   */
  public function save($entity, DatabaseTransaction $transaction = NULL) {

    if (isset($entity->is_new)) {
      $entity->created_at = REQUEST_TIME;
    }

    $entity->updated_at = REQUEST_TIME;
    
    
    // Always save new revisions.
    $entity->is_new_revision = TRUE;

    return parent::save($entity, $transaction);
  }

}

/**
 * Our custom controller for the admin ui.
 *
 * The EntityDefaultUIController can be found in
 * sites/all/modules/contrib/entity/includes/entity.ui.inc
 */
class EventStationUIController extends EntityDefaultUIController {
  
    /**
   * Generates the table headers for the overview table.
   */
  protected function overviewTableHeaders($conditions, $rows, $additional_header = array()) {
    $header = $additional_header;
    array_unshift($header, t('Event Stations'));
    if (!empty($this->entityInfo['exportable'])) {
      $header[] = t('Status');
    }
    // Add operations with the right colspan.
    $header[] = array('data' => t('Operations'), 'colspan' => $this->operationCount());
    return $header;
  }

}

