
<?php
/**
 * @file
 * Installation, update and uninstall and schema hooks for the event_station module.
 *
 */

/**
 * Implements hook_schema().
 */


include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'event_station') . "/includes/event_station.constants.inc";

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function event_station_install() {
  // Use schema API to create database table.
  // TODO The drupal_(un)install_schema functions are called automatically in D7.
  //drupal_install_schema('event_station');
}
/**
 * Implements hook_uninstall().
 */
function event_station_uninstall() {
  // Use schema API to delete database table.
  // TODO The drupal_(un)install_schema functions are called automatically in D7.
  //drupal_uninstall_schema('event_station');
  // Delete our module's variable from the variables table.

}


/**
 * Implements hook_schema().
 */
function event_station_schema() {

  $schema = array();
  $schema['evreg_eventstation'] = array(
    'description' => 'Stores a specific student activity overseen by a volunteer parent at a PTA event.',
    'fields' => array(
      'esid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The primary identifier for a station.',
      ),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The ID of the event station\'s default revision.',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the node was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      
      'changed' => array(
        'description' => 'The Unix timestamp when the node was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ), //fields
    'primary key' => array('esid'),
  ); 
  
  $schema['evreg_eventstation_revision'] = array(
    'description' => t('event station entity revisions'),
    'fields' => array(
      'revision_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique revision ID.',
      ),
      'esid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The ID of the attached entity.',
      ),
      'name' => array(
        'description' => 'Human readable name of the event station',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'A description of the event station.',
      ),

      //The number of slots available for volunteers
      // Since this is an array should the field be a foreign key to another table acting as the array.
      'spots' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,//0,
        'description' => 'Spots for the guiding event participant',
      ),
      
      // Since this is an array should the field be a foreign key to another table acting as the array.        		
      'guides' => array(
        'description' => 'Name of the guiding event participants',
        'type' => 'text',
        'not null' => TRUE,
        //'serialize' => TRUE,
        //'serialized default' => 'a:0:{}',
      ),
      // this is the registration event
      // May be a 'foreign key' on the table.
      'event' => array(
        'description' => 'Event associated with the station.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        //'default' => variable_get('registration_event', 'PTA Event'),
        'default' => DEFAULT_EVENT,
      ),
      
      'weight' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0, //make default dynamic?  Like auto-indexing?  Perhaps set new value by variable_set.
        'description' => 'The weight of the station.  The lower the integer the lighter the item.', //The create new value by variable_get() + 1 2011Jan29
      ),
      //uid
      'owner' => array(
        'description' => 'The user responsible for managing the station.  Initially, this is the station creator',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      
      'status' => array(
        'description' => 'Boolean indicating whether the station is open or closed (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      
      'visibility' => array(
        'description' => 'Boolean indicating whether the station is visible to non-administrators.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('revision_id'),
  );

  return $schema;
}




/**
 *  Modifying the guides field type from serialized array to text.
 * 
 *  2014March14 tjs
 */

function event_station_update_7000(&$sandbox) {
  
      $spec = array(
        'description' => 'Name of the guiding event participants',
        'type' => 'text',
        'not null' => TRUE,
      );

  db_change_field('evreg_eventstation_revision', 'guides', 'guides', $spec);
}


/**
 * 
 * db_change_field($table, $field, $field_new, $spec, $keys_new = array())
 * 
 * 
 * 
 * 
 * 
 */